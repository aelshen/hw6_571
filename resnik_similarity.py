'''
#==============================================================================
resnik_similarity
/Users/aelshen/Documents/Dropbox/School/CLMS 2013-2014/Winter 2014/Ling 571-Deep Processing Techniques for NLP/hw6_571/resnik_similarity.py
Created on Feb 28, 2014
@author: aelshen
#==============================================================================
'''

import os
import sys
from nltk.corpus import wordnet as wn
from collections import defaultdict
#==============================================================================
#--------------------------------Constants-------------------------------------
#==============================================================================
DEBUG = True

#==============================================================================
#-----------------------------------Main---------------------------------------
#==============================================================================
def main():
    context_file = sys.argv[1]
    
    context_dict = LoadContextFile(context_file)
    
    print("Hello, World!")
#==============================================================================    
#---------------------------------Functions------------------------------------
#==============================================================================
##-------------------------------------------------------------------------
## LoadContextFile()
##-------------------------------------------------------------------------
##    Description:        description
##
##    Arguments:        arguments
##
##    Calls:                calls
##
##        Returns:            returns
##-------------------------------------------------------------------------
def LoadContextFile(context_file):
    context_dict = defaultdict(set)
    
    for line in open(context_file, 'r'):
        line = line.strip().split()
        probe_word = line[0]
        word_grouping = line[1].split(",")
        
        for word in word_grouping:
            context_dict[probe_word].add(word)
            
    return context_dict

#==============================================================================    
#----------------------------------Classes-------------------------------------
#==============================================================================
##-------------------------------------------------------------------------
## Class Classname
##-------------------------------------------------------------------------
##    Description:        desciription
##
##    Arguments:         arguments
##
##
##    Properties:         properties
##
##    Calls:                  calls
##
##-------------------------------------------------------------------------
class Classname:
    def __init__(self):
        self.x = 0

#==============================================================================    
#------------------------------------------------------------------------------
#==============================================================================
if __name__ == "__main__":
    sys.exit( main() )